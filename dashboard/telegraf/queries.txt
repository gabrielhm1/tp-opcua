Motores Ligados

import "strings"

from(bucket: "opc")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "opcua")
  |> filter(fn: (r) => r["_field"] =~ /motor\d+Status/)
  |> filter(fn: (r) => r["host"] == "f0eee15fd0b8")
  |> map(fn: (r) => ({ r with _field: strings.title(v: strings.replace(i: 1, v: r._field, t: "Status", u: "")), _value: if r._value == "on" then "1" else if r._value == "off" then "0" else "0" }))
  |> toInt()
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")
-------------------------------------------------------
Velocidade (RPM)
import "strings"

from(bucket: "opc")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "opcua")
  |> filter(fn: (r) => r["_field"] =~ /motor\d+Speed/)
  |> filter(fn: (r) => r["host"] == "f0eee15fd0b8")
  |> map(fn: (r) => ({ r with _field: strings.toTitle(v: strings.replace(i:1,v: r._field, t: "Speed", u: "")), _value: r._value * 60.0 / 6.3 }))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")
--------------------------------------------------------
Tensão de Armadura (Valor instantaneo)

import "strings"

from(bucket: "opc")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "opcua")
  |> filter(fn: (r) => r["_field"] =~ /motor\d+Voltage/)
  |> filter(fn: (r) => r["host"] == "f0eee15fd0b8")
  |> map(fn: (r) => ({ r with _field: strings.toTitle(v: strings.replace(i:1,v: r._field, t: "Speed", u: "")), _value: r._value }))
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")
--------------------------------------------------------
Tensão de Armadura (timestamp)

from(bucket: "opc")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "opcua")
  |> filter(fn: (r) => r["id"] == "motor3" or r["id"] == "motor4" or r["id"] == "motor5" or r["id"] == "motor6" or r["id"] == "motor7" or r["id"] == "motor8" or r["id"] == "motor9" or r["id"] == "motor11" or r["id"] == "motor2" or r["id"] == "motor10" or r["id"] == "motor1")
  |> filter(fn: (r) => r["_field"] == "motor2Voltage" or r["_field"] == "motor3Voltage" or r["_field"] == "motor5Voltage" or r["_field"] == "motor4Voltage" or r["_field"] == "motor6Voltage" or r["_field"] == "motor7Voltage" or r["_field"] == "motor8Voltage" or r["_field"] == "motor9Voltage" or r["_field"] == "motor1Voltage" or r["_field"] == "motor10Voltage")
  |> filter(fn: (r) => r["host"] == "f0eee15fd0b8")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")
--------------------------------------------------------
Velocidade (Timestamp)

from(bucket: "opc")
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)
  |> filter(fn: (r) => r["_measurement"] == "opcua")
  |> filter(fn: (r) => r["id"] == "motor3" or r["id"] == "motor4" or r["id"] == "motor5" or r["id"] == "motor6" or r["id"] == "motor7" or r["id"] == "motor8" or r["id"] == "motor9" or r["id"] == "motor11" or r["id"] == "motor2" or r["id"] == "motor10" or r["id"] == "motor1")
  |> filter(fn: (r) => r["_field"] == "motor2Speed" or r["_field"] == "motor3Speed" or r["_field"] == "motor5Speed" or r["_field"] == "motor4Speed" or r["_field"] == "motor6Speed" or r["_field"] == "motor7Speed" or r["_field"] == "motor8Speed" or r["_field"] == "motor9Speed" or r["_field"] == "motor1Speed" or r["_field"] == "motor10Speed")
  |> filter(fn: (r) => r["host"] == "f0eee15fd0b8")
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)
  |> yield(name: "mean")
